#!/bin/bash

# Configure directories
build_dir=$1
cache_basedir=$2

check_node() {
  # Resolve node version using semver.io
  node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)
  npm_version=$(curl --silent --get --data-urlencode "range=${npm_semver_range}" https://semver.io/npm/resolve)

  # Check if we have latest node in cache
  if [ -f $cache_basedir/node/version ]; then
    node_version_cached=$(cat $cache_basedir/node/version | xargs)
    if [ "$node_version_cached" != "$node_version" ]; then
      echo "Installing newer version of node. Discarding cached version."
      install_node
    else
      echo "Node found in cache"
      # Copy to vendor folder
      mkdir -p $build_dir/vendor/node
      cp -R $cache_basedir/node $build_dir/vendor/
    fi
  else
    install_node
  fi

  PATH=$PATH:$build_dir/vendor/node/bin

  echo "Building runtime environment"
  mkdir -p $build_dir/.profile.d
  echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" >$build_dir/.profile.d/nodejs.sh
}

install_node() {
  # Download node from Heroku's S3 mirror of nodejs.org/dist
  echo "Downloading and installing node" # 16.1.0
  node_file="node-v$node_version-linux-x64.tar.gz"
  node_url="http://s3pository.heroku.com/node/v$node_version/$node_file"
  curl -O $node_url
  tar -xJvf $node_file -C $build_dir
  rm $node_file

  # Move node (and npm) into ./vendor and make them executable
  mv $build_dir/node-v$node_version-linux-x64 $build_dir/vendor/node
  chmod +x $build_dir/vendor/node/bin/*

  # Save to cache too
  mkdir -p $cache_basedir/node
  cp -R $build_dir/vendor/node $cache_basedir/
  echo $node_version >$cache_basedir/node/version
}

check_zero() {
  zero_version=$(npm show zero version)
  # Check if we have latest node in cache
  if [ -f $cache_basedir/zero/version ]; then
    zero_version_cached=$(cat $cache_basedir/zero/version | xargs)
    if [ "$zero_version_cached" != "$zero_version" ]; then
      echo "Installing newer version of zero. Discarding cached version."
      install_zero
    else
      echo "Zero found in cache"
      # Copy to vendor folder
      mkdir -p $build_dir/vendor/zero
      cp -R $cache_basedir/zero $build_dir/vendor/
    fi
  else
    install_zero
  fi

  PATH=$PATH:$build_dir/vendor/zero/bin
  echo "export PATH=\"\$HOME/vendor/zero/bin:\$PATH\";" >$build_dir/.profile.d/zero.sh
}

install_zero() {
  # Install zero
  echo "Installing Zero"
  mkdir -p $build_dir/vendor/zero
  npm i --prefix $build_dir/vendor/zero zero -g

  # Save to cache too
  mkdir -p $cache_basedir/zero
  cp -R $build_dir/vendor/zero $cache_basedir/
  echo "saving version id"
  echo $zero_version
  echo $zero_version >$cache_basedir/zero/version
}

# Move app to a child folder (including any hidden files (dotfiles))
cd $build_dir
mkdir -p app
shopt -s extglob dotglob
mv !(app) app
shopt -u dotglob

# Create folder for node, zero etc
mkdir -p $build_dir/vendor

# Install or copy from cache
check_node
check_zero

# Add procfile
echo "web: NODE_ENV=production zero app" | tee $build_dir/Procfile

# Install packages
cd $build_dir/app
if [ -f $build_dir/package.json ]; then
  echo "Installing NPM Packages"
  npm i
fi

# Build
echo "Building App with Zero"
PARCEL_WORKERS=1 BUILDPATH=$cache_basedir/tmp/abc SKIPTEMPCLEAR="true" zero build $build_dir/app
